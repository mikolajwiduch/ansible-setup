- name: Cleanup all Docker resources
  hosts: all
  become: true
  tasks:
    - name: Check if any containers are running
      shell: docker ps -aq
      register: container_list
      changed_when: false

    - name: Stop and remove all containers
      shell: docker rm -f $(docker ps -aq)
      when: container_list.stdout != ""
      ignore_errors: true

    - name: Check if the Swarm network exists
      shell: docker network ls --filter name={{ swarm_network_name }} --format '{{ "{{.Name}}" }}'
      register: network_list
      changed_when: false

    - name: Remove Swarm network
      command: docker network rm "{{ swarm_network_name }}"
      when: network_list.stdout.find(swarm_network_name) != -1
      ignore_errors: true

    - name: Check if the node is part of a swarm
      shell: docker info --format '{{ "{{.Swarm.LocalNodeState}}" }}'
      register: swarm_state
      changed_when: false

    - name: Leave Docker Swarm
      shell: docker swarm leave --force
      when: swarm_state.stdout == "active"
      ignore_errors: true

- name: Leave Swarm (non-leader nodes only)
  hosts: all:!webservers[0]
  become: true
  tasks:
    - name: Check if the node is part of a swarm
      shell: docker info --format '{{ "{{.Swarm.LocalNodeState}}" }}'
      register: swarm_state
      changed_when: false

    - name: Leave Docker Swarm
      shell: docker swarm leave --force
      when: swarm_state.stdout == "active"
      ignore_errors: true

- name: Leave Swarm (leader node)
  hosts: webservers[0]
  become: true
  tasks:
    - name: Check if the node is part of a swarm
      shell: docker info --format '{{ "{{.Swarm.LocalNodeState}}" }}'
      register: swarm_state
      changed_when: false

    - name: Leave Docker Swarm
      shell: docker swarm leave --force
      when: swarm_state.stdout == "active"
      ignore_errors: true